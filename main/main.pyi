import pygame
from typing import Union, Callable, Dict, Tuple, Any, Optional


AnyVector = Union[Tuple[float, float], pygame.math.Vector2, Vector2]
EventDictType = Dict[int, Callable[[], None]]
Color = pygame.Color
Event = pygame.event.Event


class Vector2(pygame.math.Vector2):
    def int(self) -> Tuple[int, int]: ...
    def tuple(self) -> Tuple[float, float]: ...

class Game(object):
    def __init__(self, screenSize: tuple[int, int]) -> None:
        self.display: pygame.Surface = None
        self.clock: pygame.time.Clock = None
        self.running: bool = None
        self.tickCall: Callable[[int], None] = None
        self.drawCall: Callable[[], None] = None
        self.eventCall: Callable[[Event], None] = None
        self.keyDownDict: Any = None
        ...
    def run(self) -> None: ...
    def tick(self) -> None: ...
    def draw(self) -> None: ...
    def handleEvents(self) -> None: ...
    def exit(self) -> None: ...
    @staticmethod
    def setCaption(caption: str) -> None: ...


class Drawable:
    def __init__(self, display:pygame.Surface, pos:AnyVector,
                 hitbox: Optional[pygame.Surface] = None) -> None:
        self.display: pygame.Surface = None
        self.pos: Vector2 = None
        self.hitbox: Optional[pygame.Surface] = None
        ...
    def tick(self, dt:int) -> None: ...
    def draw(self) -> None: ...
    def moveTo(self, pos:AnyVector) -> None: ...
    def moveBy(self, offset:AnyVector) -> None: ...
    def isClicked(self, clickPos: AnyVector) -> bool: ...

class Image(Drawable):
    def __init__(self, display: pygame.Surface, pos:AnyVector, image:pygame.Surface) -> None:
        self.image: pygame.Surface = None
        ...
    def draw(self) -> None: ...

class Text(Drawable):
    def __init__(self, display:pygame.Surface, pos: AnyVector, text: str = "", font: pygame.font.Font = None,
                 fontColor: Color = None, hitbox: pygame.Surface = None
                 ) -> None:
        self.font: pygame.font.Font = None
        self.text: str = None
        self.fontColor: Color = None
        self.hitbox: pygame.Surface = None
        ...
    def draw(self) -> None: ...
    def renderText(self, color: Color = None) -> pygame.Surface: ...
    def setAutoHitbox(self) -> None: ...
    def write(self, text: str) -> None: ...
    def clear(self) -> None: ...

class TextBox(Text):
    def __init__(self, display: pygame.Surface, pos: AnyVector, font: pygame.font.Font = None,
                 fontColor: Color = None, fontColorActive: Color = None,
                 flexibleHitbox: bool = None) -> None:
        self.isActive: bool = None
        self.trueText: str = None
        self.fontColorActive: Color = None
        self.flexibleHitbox: bool = None
        ...
    def type(self, char:str, key: int) -> None: ...
    def handleEvents(self, event: Event) -> None: ...
    def draw(self) -> None: ...
